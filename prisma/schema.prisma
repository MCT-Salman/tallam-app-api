generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ---------- Enums ----------

enum Role {
  STUDENT
  ADMIN
  SUBADMIN
}

enum TransactionStatus {
  PENDING
  SUCCEEDED
  FAILED
  CANCELLED
}

// ---------- Auth / Sessions / Security ----------
model User {
  id           Int       @id @default(autoincrement())
  phone        String    @unique
  passwordHash String
  name         String
  birthDate    DateTime
  avatarUrl    String?
  role         Role      @default(STUDENT)
  sex          String
  country      String? // سيتم ملؤه تلقائياً من رقم الهاتف
  countryCode  String? // رمز الدولة (+966, +20, إلخ)
  isVerified   Boolean   @default(false)
  isActive     Boolean   @default(true)
  expiresAt    DateTime?
  accessCodes  AccessCode[]
  lessonProgress LessonProgress[]

  currentSessionId String?        @unique
  sessions         Session[]
  refreshTokens    RefreshToken[]
  loginAttempts    LoginAttempt[]

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  Transaction    Transaction[]
  QuizResult     QuizResult[]
  CourseProgress CourseProgress[]
  Notification   Notification[]
  Review         Review[]
  SupportMessage SupportMessage[]
  Suggestion     Suggestion[]
  AuditLog       AuditLog[]
  CodeRequest    CodeRequest[]
  Admin          Admin[]
}

model Admin {
  id           Int       @id @default(autoincrement())
  userId       Int
  user         User      @relation(fields: [userId], references: [id])
  username     String
  email        String
}

model Session {
  id         String    @id @default(cuid())
  user       User      @relation(fields: [userId], references: [id])
  userId     Int
  userAgent  String?
  ip         String?
  realIp     String? // عنوان IP الحقيقي (بعد معالجة proxy headers)
  location   String? // معلومات الموقع الجغرافي (اختياري)
  deviceInfo String? // معلومات الجهاز (اختياري)
  createdAt  DateTime  @default(now())
  revokedAt  DateTime?

  refreshTokens RefreshToken[]

  @@index([userId])
  @@index([realIp])
}

model RefreshToken {
  id        Int       @id @default(autoincrement())
  tokenHash String    @unique // hash للتوكن للأمان
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  session   Session   @relation(fields: [sessionId], references: [id])
  sessionId String
  expiresAt DateTime
  isRevoked Boolean   @default(false)
  revokedAt DateTime?
  createdAt DateTime  @default(now())

  @@index([userId])
  @@index([sessionId])
  @@index([tokenHash])
}

model LoginAttempt {
  id            Int      @id @default(autoincrement())
  identifier    String // رقم الهاتف أو البريد الإلكتروني
  user          User?    @relation(fields: [userId], references: [id])
  userId        Int?
  ip            String
  userAgent     String?
  success       Boolean  @default(false)
  failureReason String? // سبب الفشل (كلمة مرور خاطئة، حساب مقفل، إلخ)
  createdAt     DateTime @default(now())

  @@index([identifier])
  @@index([ip])
  @@index([createdAt])
}

model OtpCode {
  id          Int      @id @default(autoincrement())
  phone       String
  code        String
  expiresAt   DateTime
  used        Boolean  @default(false)
  attempts    Int      @default(0) // عدد محاولات التحقق
  maxAttempts Int      @default(3) // الحد الأقصى للمحاولات

  createdAt DateTime @default(now())

  @@index([phone])
}

// ---------- Content taxonomy ----------
model Domain {
  id              Int              @id @default(autoincrement())
  name            String
  slug            String?          @unique
  isActive        Boolean          @default(true)
  subjects        Subject[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model Subject {
  id               Int            @id @default(autoincrement())
  name             String
  slug             String?        @unique
  isActive         Boolean        @default(true)
  domainId         Int?
  domain           Domain?         @relation(fields: [domainId], references: [id])
  specialization   Specialization[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@index([domainId])
}

model Specialization {
  id           Int      @id @default(autoincrement())
  name         String
  slug         String?   @unique
  imageUrl     String?
  isActive     Boolean   @default(true)
  subjectId    Int?
  subject      Subject?         @relation(fields: [subjectId], references: [id])
  instructors  Instructor[]
  courses      Course[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([subjectId])
}

model Course {
  id                   Int              @id @default(autoincrement())
  title                String
  slug                 String?          @unique
  description          String?
  imageUrl             String?
  specializationId     Int
  specialization       Specialization @relation(fields: [specializationId], references: [id])
  isActive             Boolean          @default(true)
  levels               CourseLevel[]
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt

  @@index([specializationId])
}

model Instructor {
  id        Int      @id @default(autoincrement())
  name      String
  bio       String?
  avatarUrl String?
  specializationId Int
  specialization   Specialization @relation(fields: [specializationId], references: [id])
  // courses    Course[]
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  courseLevels CourseLevel[]

  @@index([specializationId])
}



model CourseLevel {
  id          Int      @id @default(autoincrement())
  name        String
  order       Int?
  priceUSD    Float?
  priceSAR    Float?
  isFree      Boolean          @default(false)
  isActive    Boolean          @default(true)
  previewUrl  String?
  downloadUrl String?
  courseId    Int
  course      Course   @relation(fields: [courseId], references: [id])
  instructorId  Int
  instructor    Instructor  @relation(fields: [instructorId], references: [id])
  lessons      Lesson[]
  quizzes      Quiz[]
  progress     CourseProgress[]
  reviews      Review[]
  accessCodes  AccessCode[]
  Transaction  Transaction[]
  CodeRequest  CodeRequest[]
  coupons      Coupon[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([courseId])
  @@index([instructorId])
}

model Lesson {
  id                Int              @id @default(autoincrement())
  title             String
  description       String?
  youtubeUrl        String?
  youtubeId         String?
  googleDriveUrl    String?
  durationSec       Int?
  orderIndex        Int?
  isFreePreview     Boolean          @default(false)
  isActive          Boolean          @default(true)
  courseLevelId     Int
  courseLevel       CourseLevel     @relation(fields: [courseLevelId], references: [id])
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  VideoLinkCheck    VideoLinkCheck[]
  progress          LessonProgress[]

  @@index([courseLevelId])
}

// ---------- Access / Purchase / Payments ----------
model Transaction {
  id         Int               @id @default(autoincrement())
  userId     Int?
  user       User?             @relation(fields: [userId], references: [id])
  courseLevelId   Int?
  courseLevel     CourseLevel?           @relation(fields: [courseLevelId], references: [id])
  amount     Decimal           @db.Decimal(12, 2)
  currency   String
  status     TransactionStatus @default(PENDING)
  providerId String?
  metadata   Json?
  createdAt  DateTime          @default(now())

  @@index([userId])
  @@index([courseLevelId])
  @@index([status])
}

model AccessCode {
  id        Int       @id @default(autoincrement())
  code      String    @unique
  courseLevelId Int
  courseLevel CourseLevel @relation(fields: [courseLevelId], references: [id])
  validityInMonths Int? 
  issuedBy  Int?
  issuedAt  DateTime  @default(now())
  usedBy    Int
  user      User     @relation(fields: [usedBy], references: [id])
  used      Boolean   @default(false)
  usedAt    DateTime?
  expiresAt DateTime?
  isActive  Boolean   @default(true)
  financialAccounts FinancialAccount[]

  @@index([courseLevelId])
  @@index([usedBy])
}

model FinancialAccount {
  id              Int       @id @default(autoincrement())
  receiptImageUrl String
  amountPaid      Decimal   @db.Decimal(12, 2)
  notes           String?
  accessCodeId    Int
  accessCode      AccessCode @relation(fields: [accessCodeId], references: [id])
  couponId        Int?
  coupon          Coupon?    @relation(fields: [couponId], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([accessCodeId])
  @@index([couponId])
}

model CodeRequest {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  courseLevelId  Int
  courseLevel    CourseLevel   @relation(fields: [courseLevelId], references: [id])
  status    String   @default("PENDING") // PENDING, APPROVED, REJECTED
  contact   String? // رقم واتساب أو تيليغرام المستخدم
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([courseLevelId])
}


model Coupon {
  id        Int       @id @default(autoincrement())
  code      String    @unique
  discount  Float
  isPercent Boolean   @default(true)
  expiry    DateTime?
  maxUsage  Int?
  usedCount Int       @default(0)
  isActive  Boolean   @default(true)
  courseLevelId Int
  courseLevel   CourseLevel @relation(fields: [courseLevelId], references: [id])
  financialAccounts FinancialAccount[]
  createdBy Int?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([courseLevelId])
}

// ---------- Quizzes & Results ----------
model Quiz {
  id         Int          @id @default(autoincrement())
  courseLevelId   Int
  courseLevel     CourseLevel       @relation(fields: [courseLevelId], references: [id])
  title      String?
  questions  Question[]
  createdAt  DateTime     @default(now())
  QuizResult QuizResult[]
}

model Question {
  id      Int      @id @default(autoincrement())
  quizId  Int
  quiz    Quiz     @relation(fields: [quizId], references: [id])
  text    String
  order   Int?
  options Option[]
}

model Option {
  id         Int      @id @default(autoincrement())
  questionId Int
  question   Question @relation(fields: [questionId], references: [id])
  text       String
  isCorrect  Boolean  @default(false)
}

model QuizResult {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  quizId    Int
  quiz      Quiz     @relation(fields: [quizId], references: [id])
  score     Float
  answers   Json
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([quizId])
}

model CourseProgress {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  courseLevelId  Int
  courseLevel    CourseLevel   @relation(fields: [courseLevelId], references: [id])
  progress  Float    @default(0)
  completed Boolean  @default(false)
  score     Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseLevelId])
}

model LessonProgress {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, lessonId])
  @@index([lessonId])
}

// ---------- Notifications / Stories / Ads ----------
model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int?
  user      User?    @relation(fields: [userId], references: [id])
  title     String
  body      String
  data      Json?
  isRead    Boolean  @default(false)
  link      String?
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([createdAt])
}

model Story {
  id         Int       @id @default(autoincrement())
  title      String?
  imageUrl   String
  startedAt  DateTime?
  endedAt    DateTime?
  orderIndex Int?
  isActive   Boolean   @default(true)
  createdAt  DateTime  @default(now())
}

model Advertisement {
  id        Int       @id @default(autoincrement())
  title     String
  imageUrl  String
  link      String?
  isActive  Boolean   @default(true)
  startsAt  DateTime?
  endsAt    DateTime?
  createdAt DateTime  @default(now())
}

// ---------- Ratings / Feedback / Support ----------
model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  courseLevelId  Int
  courseLevel    CourseLevel   @relation(fields: [courseLevelId], references: [id])
  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([courseLevelId])
}

model SupportMessage {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  message   String
  reply     String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId])
}

model Suggestion {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  message   String
  createdAt DateTime @default(now())
}

// ---------- Utilities / Admin logs / Settings ----------
model File {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  url       String
  mimeType  String?
  size      Int?
  meta      Json?
  createdAt DateTime @default(now())
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  actorId   Int?
  actor     User?    @relation(fields: [actorId], references: [id])
  action    String
  resource  String?
  meta      Json?
  createdAt DateTime @default(now())
}

model RateLimit {
  id        Int       @id @default(autoincrement())
  key       String
  attempts  Int       @default(0)
  windowEnd DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([key])
}

model VideoLinkCheck {
  id        Int      @id @default(autoincrement())
  url       String
  lessonId  Int?
  lesson    Lesson?  @relation(fields: [lessonId], references: [id])
  status    String // valid, invalid, private, removed
  checkedAt DateTime @default(now())
}

//------------ settings --------------

model AppSettings {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
