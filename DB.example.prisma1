// ---------- Datasource & Generator ----------
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql" 
  url      = env("DATABASE_URL")
}

// ---------- Enums ----------
enum Role {
  STUDENT
  INSTRUCTOR
  ADMIN
  MANAGER
}

enum TransactionStatus {
  PENDING
  SUCCEEDED
  FAILED
  CANCELLED
}


// ---------- Auth / Sessions / Security ----------
model User {
  id               Int             @id @default(autoincrement())
  phone            String          @unique
  passwordHash     String
  name             String
  birthDate        DateTime?
  sex              String?
  avatarUrl        String?
  country          String?
  countryCode      String?
  role             Role            @default(STUDENT)
  isVerified       Boolean         @default(false)
  isActive         Boolean         @default(true)
  currentSessionId Int?
  sessions         Session[]      
  refreshTokens    RefreshToken[]
  loginAttempts    LoginAttempt[]
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  @@index([phone])
}

model Session {
  id         Int      @id @default(autoincrement())
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  ip         String?
  realIp     String?
  userAgent  String?
  revoked    Boolean  @default(false)
  meta       Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  refreshTokens RefreshToken[]
  @@index([userId])
}

model RefreshToken {
  id         Int      @id @default(autoincrement())
  tokenHash  String
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  sessionId  Int
  session    Session  @relation(fields: [sessionId], references: [id])
  revoked    Boolean  @default(false)
  expiresAt  DateTime
  createdAt  DateTime @default(now())

  @@index([userId])
  @@index([sessionId])
}

model LoginAttempt {
  id        Int      @id @default(autoincrement())
  phone     String?
  userId    Int?
  user      User?    @relation(fields: [userId], references: [id])
  ip        String?
  success   Boolean  @default(false)
  reason    String?
  createdAt DateTime @default(now())

  @@index([phone])
  @@index([userId])
  @@index([createdAt])
}

model OtpCode {
  id        Int      @id @default(autoincrement())
  phone     String
  codeHash  String?
  code      String?
  used      Boolean  @default(false)
  expiresAt DateTime?
  createdAt DateTime @default(now())

  @@index([phone])
  @@index([used])
  @@index([createdAt])
}

// ---------- Content taxonomy ----------
model Domain {
  id               Int               @id @default(autoincrement())
  name             String
  slug             String?           @unique
  specializations  Specialization[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model Specialization {
  id        Int       @id @default(autoincrement())
  name      String
  slug      String?   @unique
  domainId  Int
  domain    Domain    @relation(fields: [domainId], references: [id])
  subjects  Subject[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([domainId])
}

model Subject {
  id               Int       @id @default(autoincrement())
  name             String
  slug             String?   @unique
  specializationId Int
  specialization   Specialization @relation(fields: [specializationId], references: [id])
  courses          Course[]
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@index([specializationId])
}

model Instructor {
  id         Int      @id @default(autoincrement())
  name       String
  bio        String?
  avatarUrl  String?
  courses    Course[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Course {
  id            Int           @id @default(autoincrement())
  title         String
  slug          String?       @unique
  description   String?
  price         Float?
  currency      String?       @default("USD")
  isFree        Boolean       @default(false)
  subjectId     Int
  subject       Subject       @relation(fields: [subjectId], references: [id])
  instructorId  Int
  instructor    Instructor    @relation(fields: [instructorId], references: [id])
  lessons       Lesson[]
  levels        CourseLevel[]
  quizzes       Quiz[]
  accessCodes   AccessCode[]
  progress      CourseProgress[]
  reviews       Review[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([subjectId])
  @@index([instructorId])
}

model CourseLevel {
  id        Int      @id @default(autoincrement())
  name      String
  order     Int?
  courseId  Int
  course    Course   @relation(fields: [courseId], references: [id])
  lessons   Lesson[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Lesson {
  id           Int        @id @default(autoincrement())
  title        String
  description  String?
  youtubeUrl   String?
  youtubeId    String?
  contentUrl   String?
  durationSec  Int?
  orderIndex   Int?
  isFreePreview Boolean    @default(false)
  courseId     Int
  course       Course     @relation(fields: [courseId], references: [id])
  courseLevelId Int?
  courseLevel  CourseLevel? @relation(fields: [courseLevelId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([courseId])
  @@index([courseLevelId])
}

// ---------- Access / Purchase / Payments ----------
model Transaction {
  id         Int               @id @default(autoincrement())
  userId     Int?
  user       User?             @relation(fields: [userId], references: [id])
  courseId   Int?
  course     Course?           @relation(fields: [courseId], references: [id])
  amount     Decimal           @db.Decimal(12,2)
  currency   String
  status     TransactionStatus @default(PENDING)
  providerId String?
  metadata   Json?
  createdAt  DateTime          @default(now())

  @@index([userId])
  @@index([courseId])
  @@index([status])
}

model AccessCode {
  id         Int      @id @default(autoincrement())
  code       String   @unique
  courseId   Int
  course     Course   @relation(fields: [courseId], references: [id])
  issuedBy   Int?
  issuedAt   DateTime @default(now())
  usedBy     Int?
  usedAt     DateTime?
  expiresAt  DateTime?
  isActive   Boolean  @default(true)

  @@index([courseId])
  @@index([usedBy])
}

model Coupon {
  id         Int      @id @default(autoincrement())
  code       String   @unique
  discount   Float
  isPercent  Boolean  @default(true)
  expiry     DateTime?
  maxUsage   Int?
  usedCount  Int      @default(0)
  isActive   Boolean  @default(true)
  createdBy  Int?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
}

// ---------- Quizzes & Results ----------
model Quiz {
  id        Int       @id @default(autoincrement())
  courseId  Int
  course    Course    @relation(fields: [courseId], references: [id])
  title     String?
  questions Question[]
  createdAt DateTime  @default(now())
}

model Question {
  id        Int       @id @default(autoincrement())
  quizId    Int
  quiz      Quiz      @relation(fields: [quizId], references: [id])
  text      String
  order     Int?
  options   Option[]
}

model Option {
  id         Int      @id @default(autoincrement())
  questionId Int
  question   Question @relation(fields: [questionId], references: [id])
  text       String
  isCorrect  Boolean  @default(false)
}

model QuizResult {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  quizId    Int
  quiz      Quiz     @relation(fields: [quizId], references: [id])
  score     Float
  answers   Json
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([quizId])
}

model CourseProgress {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  courseId  Int
  course    Course   @relation(fields: [courseId], references: [id])
  progress  Float    @default(0)
  completed Boolean  @default(false)
  score     Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
}

// ---------- Notifications / Stories / Ads ----------
model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int?
  user      User?    @relation(fields: [userId], references: [id])
  title     String
  body      String
  data      Json?
  isRead    Boolean  @default(false)
  link      String?
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([createdAt])
}

model Story {
  id         Int      @id @default(autoincrement())
  title      String?
  imageUrl   String
  startedAt  DateTime?
  endedAt    DateTime?
  orderIndex Int?
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
}

model Advertisement {
  id        Int      @id @default(autoincrement())
  title     String
  imageUrl  String
  link      String?
  isActive  Boolean  @default(true)
  startsAt  DateTime?
  endsAt    DateTime?
  createdAt DateTime @default(now())
}

// ---------- Ratings / Feedback / Support ----------
model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  courseId  Int
  course    Course   @relation(fields: [courseId], references: [id])
  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([courseId])
}

model SupportMessage {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  message   String
  reply     String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId])
}

model Suggestion {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  message   String
  createdAt DateTime @default(now())
}

// ---------- Utilities / Admin logs / Settings ----------
model File {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  url       String
  mimeType  String?
  size      Int?
  meta      Json?
  createdAt DateTime @default(now())
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  actorId   Int?
  actor     User?    @relation(fields: [actorId], references: [id])
  action    String
  resource  String?
  meta      Json?
  createdAt DateTime @default(now())
}

model RateLimit {
  id        Int      @id @default(autoincrement())
  key       String
  attempts  Int      @default(0)
  windowEnd DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([key])
}

model VideoLinkCheck {
  id        Int      @id @default(autoincrement())
  url       String
  lessonId  Int?
  lesson    Lesson?  @relation(fields: [lessonId], references: [id])
  status    String   // valid, invalid, private, removed
  checkedAt DateTime @default(now())
}
